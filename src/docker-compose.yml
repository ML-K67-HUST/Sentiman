version: '2.1'

services:
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - app-network

  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1
    networks:
      - app-network

  kafka-setup:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka1
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Waiting for Kafka to be ready...'
      
      cub kafka-ready -b kafka1:19092 1 30
      
      echo -e 'Creating kafka topics'
      kafka-topics --create --if-not-exists --bootstrap-server kafka1:19092 --topic twitter --partitions 1 --replication-factor 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:19092 --list
      "
    networks:
      - app-network

  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka1
      - kafka-setup
    networks:
      - app-network

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      - kafka1
      - producer
    networks:
      - app-network

  django:
    build:
      context: .
      dockerfile: Dockerfile.django
    ports:
      - "8000:8000"
    volumes:
      - ./Django-Dashboard:/app
      - static_volume:/app/static
    command: >
      sh -c "
        echo 'Waiting for MongoDB...' &&
        while ! nc -z mongodb 27017; do sleep 1; done &&
        echo 'Waiting for Kafka...' &&
        while ! nc -z kafka1 19092; do sleep 1; done &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    depends_on:
      - mongodb
      - kafka1
      - consumer
    networks:
      - app-network

volumes:
  mongodb_data:
  static_volume:

networks:
  app-network:
    driver: bridge